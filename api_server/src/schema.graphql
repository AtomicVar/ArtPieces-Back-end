"""
`Datetime` is the milliseconds since Jan. 1, 1970.
"""
scalar Datetime
scalar JSON
scalar UUID
scalar URL

type User {
    email: String
    name: String
    portrait: URL
    compressedPortrait: URL
    artworks: [Artwork]
    repos: [Repo]
}

type Artwork {
    id: UUID
    keyPhoto: URL
    compressedKeyPhoto: URL
    title: String
    description: String
    creator: String
    timestamp: Datetime
    belongingRepo: UUID
}

type Repo {
    id: UUID
    keyArtwork: Artwork
    title: String
    starter: User
    timestamp: Datetime
    artworks: [Artwork]
}

type Lecture {
    id: UUID
    title: String
    description: String
    timestamp: Datetime
    creator: User
    numberOfSteps: Int
    steps: JSON
    numberOfStars: Int
}

type Query {
    """
    **Function:** Get the information of an artwork.

    **Explaination:** `UUID` is a string.

    **Return:** an `Artwork`.
    """
    getWork(id: UUID!): Artwork

    """
    **Function:** Get the information of an user.

    **Explaination:** None.

    **Return:** an `User`.
    """
    getUser(email: String!): User

    """
    **Function:** Get the information of a repository.

    **Explaination:** `UUID` is a string.

    **Return:** an `Repo`.
    """
    getRepo(id: UUID!): Repo

    """
    **Function:** Get the information of a lecture.

    **Explaination:** `UUID` is a string.

    **Return:** an `Lecture`.
    """
    getLecture(id: UUID!): Lecture
}

type Mutation {
    """
    **Function:** Insert a new user, that is, sign up a new user.

    **Return:** The `email` of the new user.
    """
    insertUser(
        email: String!
        name: String!
        password: String!
        portrait: URL
    ): UUID

    """
    **Function:** Insert a new work.

    **Return:** The UUID of the new work.
    """
    insertWork(
        creator: String!
        title: String!
        description: String
        keyPhoto: URL!
        belongingRepo: UUID
    ): UUID

    """
    **Function:** Insert a new repository.

    **Return:** The UUID of the new repository.
    """
    insertRepo(
        title: String!
        description: String
        keyArtwork: UUID!
        starter: String!
    ): UUID

    """
    **Function:** Insert a new lecture.

    **Return:** `true` -> successfully inserted. `false` -> failure.
    """
    insertLect(
        title: String!
        description: String
        steps: JSON
        creator: String!
    ): UUID

    """
    **Function:** Remove a work.

    **Return:** `true` if success, `false` if fail.
    """
    removeWork(
        id: UUID!
    ): Boolean

    """
    **Function:** Remove a repository.

    **Return:** `true` if success, `false` if fail.
    """
    removeRepo(
        id: UUID!
    ): Boolean

    """
    **Function:** Remove a lecture.

    **Return:** `true` if success, `false` if fail.
    """
    removeLect(
        id: UUID!
    ): Boolean

    """
    **Function:** Update an user (`name`, `password`, `protrait`).

    **Return:** `true` -> succussfully updated. `false` -> the user doesn't exist.
    """
    updateUser(
        email: String!
        name: String
        password: String
        portrait: URL
    ): Boolean

    """
    **Function:** Update a work (`title`, `description`, `keyPhoto`, `creator`).

    **Return:** `true` -> successfully updated. `false` -> the work doesn't exist.
    """
    updateWork(
        id: UUID!
        keyPhoto: URL
        title: String
        description: String
        belongingRepo: UUID
    ): Boolean

    """
    **Function:** Update a repository (`title`, `description`).

    **Return:** `true` -> successfully updated. `false` -> the repository doesn't exist.
    """
    updateRepo(
        id: UUID!
        title: String,
        description: String
    ): Boolean

    """
    **Function:** Update a lecture (`title`, `description`, `steps`).

    **Return:** `true` -> successfully updated. `false` -> the lecture doesn't exist.
    """
    updateLect(
        id: UUID!
        title: String
        description: String
        steps: JSON
    ): Boolean

    """
    **Function:** Follow an user. (`origin` follows `target`)

    **Return:** The new number of followers of `target`.
    """
    follow(
        origin: String!
        target: String!
    ): Int

    """
    **Function:** Star a lecture.

    **Return:** The new number of stars of the lecture.
    """
    star(
        user: String!
        lecture: UUID!
    ): Int

    """
    **Function:** Unfollow an user. (`origin` unfollows `target`)

    **Return:** The new number of followers of `target`.
    """
    unfollow(
        origin: String!
        target: String!
    ): Int

    """
    **Function:** Unstar a lecture.

    **Return:** The new number of stars of the lecture.
    """
    unstar(
        user: String!
        lecture: UUID!
    ): Int
}
