"""
`Datetime` is the milliseconds since Jan. 1, 1970.
"""
scalar Datetime
scalar JSON
scalar UUID
scalar URL
scalar Email
"""
`Msg` is a message JSON object that has two properties: `status` and `payload`.
For each API the `Msg` object is different and you can refer to each API's document.
"""
scalar Msg

type User {
    email: String
    name: String
    portrait: URL
    compressedPortrait: URL
    signature: String
    artworks: [Artwork]
    repos: [Repo]
}

type Artwork {
    id: UUID
    keyPhoto: URL
    compressedKeyPhoto: URL
    title: String
    description: String
    creator: String
    timestamp: Datetime
    belongingRepo: UUID
}

type Repo {
    id: UUID
    keyArtwork: Artwork
    title: String
    starter: User
    timestamp: Datetime
    artworks: [Artwork]
    numberOfStars: Int
    numberOfArtworks: Int
}

type Lecture {
    id: UUID
    title: String
    description: String
    timestamp: Datetime
    creator: User
    numberOfSteps: Int
    steps: JSON
    numberOfStars: Int
}

type Query {
    """
    **Function:** Login.

    **Explaination:** Verify the user.

    **Status-0 Payload:** 'Loggin successfully.'.
    """
    login(email: Email!, password: String!): Msg

    """
    **Function:** Get the information of an artwork.

    **Explaination:** `UUID` is a string.

    **Return:** an `Artwork`.
    """
    getWork(id: UUID!): Artwork

    """
    **Function:** Get the information of an user.

    **Explaination:** None.

    **Return:** an `User`.
    """
    getUser(email: Email!): User

    """
    **Function:** Get the information of a repository.

    **Explaination:** `UUID` is a string.

    **Return:** an `Repo`.
    """
    getRepo(id: UUID!): Repo

    """
    **Function:** Get the information of a lecture.

    **Explaination:** `UUID` is a string.

    **Return:** an `Lecture`.
    """
    getLecture(id: UUID!): Lecture

    """
    **Function:** Get a new repos information feed list.

    **Explaination:** The `timestamp` is the timestamp of the first repo in your last feed list.

    **Return:** a list of `Repo`.
    """
    getRepoFeed(user: Email, timestamp: Datetime!): [Repo]

    """
    **Function:** Extend an information repo feed list.

    **Explaination:** The `timestamp` is the timestamp of the last repo in your last feed list.

    **Return:** a list of `Repo`.
    """
    extendRepoFeed(user: Email, timestamp: Datetime!): [Repo]

    """
    **Function:** Get a new lectures information feed list.

    **Explaination:** The `timestamp` is the timestamp of the first lecture in your last feed list.

    **Return:** a list of `Lecture`.
    """
    getLectFeed(user: Email, timestamp: Datetime!): [Lecture]

    """
    **Function:** Extend an information lecture feed list.

    **Explaination:** The `timestamp` is the timestamp of the last lecture in your last feed list.

    **Return:** a list of `Lect`.
    """
    extendLectFeed(user: Email, timestamp: Datetime!): [Lecture]
}

type Mutation {
    """
    **Function:** Insert a new user, that is, sign up a new user.

    **Status-0 Payload:** The `email` of the new user.
    """
    insertUser(
        email: String!
        name: String!
        password: String!
        portrait: URL
    ): Msg

    """
    **Function:** Insert a new work.

    **Status-0 Payload:** The UUID of the new work.
    """
    insertWork(
        id: UUID!
        creator: String!
        password: String!
        title: String!
        description: String
        keyPhoto: URL!
        belongingRepo: UUID
        timestamp: Datetime!
    ): Msg

    """
    **Function:** Insert a new repository.

    **Status-0 Payload:** The UUID of the new repository.
    """
    insertRepo(
        id: UUID!
        title: String!
        description: String
        keyArtwork: UUID!
        starter: String!
        password: String!
        timestamp: Datetime!
    ): Msg

    """
    **Function:** Insert a new lecture.

    **Status-0 Payload:** `true` -> successfully inserted. `false` -> failure.
    """
    insertLect(
        id: UUID!
        title: String!
        description: String
        steps: JSON
        creator: String!
        password: String!
        timestamp: Datetime!
    ): Msg

    """
    **Function:** Remove a work.

    **Status-0 Payload:** `true` if success, `false` if fail.
    """
    removeWork(
        id: UUID!
        creator: Email!
        password: String!
    ): Msg

    """
    **Function:** Remove a repository.

    **Status-0 Payload:** `true` if success, `false` if fail.
    """
    removeRepo(
        id: UUID!
        starter: Email!
        password: String!
    ): Msg

    """
    **Function:** Remove a lecture.

    **Status-0 Payload:** `true` if success, `false` if fail.
    """
    removeLect(
        id: UUID!
        creator: Email!
        password: String!
    ): Msg

    """
    **Function:** Update an user (`name`, `password`, `protrait`).

    **Status-0 Payload:** `true` -> succussfully updated. `false` -> the user doesn't exist.
    """
    updateUser(
        email: String!
        password: String!
        name: String
        newPassword: String
        portrait: URL
        signature: String
    ): Msg

    """
    **Function:** Update a work (`title`, `description`, `keyPhoto`, `creator`).

    **Status-0 Payload:** `true` -> successfully updated. `false` -> the work doesn't exist.
    """
    updateWork(
        id: UUID!
        creator: Email!
        password: String!
        keyPhoto: URL
        title: String
        description: String
    ): Msg

    """
    **Function:** Update a repository (`title`, `description`).

    **Status-0 Payload:** `true` -> successfully updated. `false` -> the repository doesn't exist.
    """
    updateRepo(
        id: UUID!
        starter: String!
        password: String!
        title: String,
        description: String
    ): Msg

    """
    **Function:** Update a lecture (`title`, `description`, `steps`).

    **Status-0 Payload:** `true` -> successfully updated. `false` -> the lecture doesn't exist.
    """
    updateLect(
        id: UUID!
        creator: String!
        password: String!
        title: String
        description: String
        steps: JSON
    ): Msg

    """
    **Function:** Follow an user. (`origin` follows `target`)

    **Status-0 Payload:** The new number of followers of `target`.
    """
    follow(
        origin: String!
        password: String!
        target: String!
    ): Msg

    """
    **Function:** Star a lecture.

    **Status-0 Payload:** The new number of stars of the lecture.
    """
    starLect(
        user: String!
        password: String!
        lecture: UUID!
    ): Msg

    """
    **Function:** Star a repo.

    **Status-0 Payload:** The new number of stars of the repo.
    """
    starRepo(
        user: String!
        password: String!
        repo: UUID!
    ): Msg

    """
    **Function:** Unfollow an user. (`origin` unfollows `target`)

    **Status-0 Payload:** The new number of followers of `target`.
    """
    unfollow(
        origin: String!
        password: String!
        target: String!
    ): Msg

    """
    **Function:** Unstar a lecture.

    **Status-0 Payload:** The new number of stars of the lecture.
    """
    unstarLect(
        user: String!
        password: String!
        lecture: UUID!
    ): Msg

    """
    **Function:** Unstar a repo.

    **Status-0 Payload:** The new number of stars of the repo.
    """
    unstarRepo(
        user: String!
        password: String!
        repo: UUID!
    ): Msg
}
